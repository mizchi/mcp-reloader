{"version":3,"file":"wrapper.js","names":["options: WrapperOptions","data: Buffer","wrapper: ServerWrapper | null"],"sources":["../src/wrapper.ts"],"sourcesContent":["#!/usr/bin/env node\nimport { spawn, ChildProcess } from \"child_process\";\nimport { fileURLToPath } from \"url\";\nimport { dirname, join } from \"path\";\nimport chokidar from \"chokidar\";\nimport { parseArgs, buildCommand } from \"./parse-args.js\";\nimport type { WrapperOptions } from './types.js';\n\nconst __dirname = dirname(fileURLToPath(import.meta.url));\n\nclass ServerWrapper {\n  private serverProcess: ChildProcess | null;\n  private isRestarting: boolean;\n  private includePatterns: string[];\n  private command: string;\n  private commandArgs: string[];\n  private isDirty: boolean;\n  private watchers: chokidar.FSWatcher[];\n\n  constructor(options: WrapperOptions) {\n    this.serverProcess = null;\n    this.isRestarting = false;\n    this.includePatterns = options.includePatterns || [];\n    this.command = options.command;\n    this.commandArgs = options.commandArgs;\n    this.isDirty = false;\n    this.watchers = [];\n  }\n\n  start(): void {\n    console.error(\"[Wrapper] Starting MCP server...\");\n    console.error(`[Wrapper] Command: ${this.command} ${this.commandArgs.join(' ')}`);\n    \n    if (this.includePatterns.length > 0) {\n      console.error(`[Wrapper] Include patterns: ${this.includePatterns.join(', ')}`);\n    }\n    \n    // Set environment variable for include patterns\n    const env = { ...process.env };\n    if (this.includePatterns.length > 0) {\n      env.MCP_HOT_RELOAD_INCLUDE = this.includePatterns.join(',');\n    }\n    \n    this.serverProcess = spawn(this.command, this.commandArgs, {\n      stdio: [\"inherit\", \"inherit\", \"pipe\"],\n      env: env\n    });\n\n    // Monitor stderr for dirty notifications\n    this.serverProcess.stderr?.on(\"data\", (data: Buffer) => {\n      const message = data.toString();\n      process.stderr.write(message);\n      \n      // Check for dirty state from the server\n      if (message.includes(\"marking server as dirty\") && !this.isRestarting) {\n        this.isDirty = true;\n        console.error(\"[Wrapper] Server marked as dirty, scheduling restart...\");\n        setTimeout(() => this.restart(), 1000); // Delay to batch multiple changes\n      }\n    });\n\n    this.serverProcess.on(\"exit\", (code, signal) => {\n      if (!this.isRestarting) {\n        console.error(`[Wrapper] Server exited with code ${code}, signal ${signal}`);\n        process.exit(code || 0);\n      }\n    });\n\n    this.serverProcess.on(\"error\", (err) => {\n      console.error(\"[Wrapper] Server process error:\", err);\n      process.exit(1);\n    });\n  }\n\n  startWatching(): void {\n    // Set up file watchers for include patterns\n    if (this.includePatterns.length > 0) {\n      console.error(\"[Wrapper] Setting up file watchers for include patterns\");\n      \n      const watcher = chokidar.watch(this.includePatterns, {\n        persistent: true,\n        ignoreInitial: true,\n        cwd: process.cwd()\n      });\n\n      watcher.on(\"all\", (event, path) => {\n        if (!this.isDirty && !this.isRestarting) {\n          console.error(`[Wrapper] Include file ${event}: ${path}, marking for restart`);\n          this.isDirty = true;\n          setTimeout(() => this.restart(), 1000); // Delay to batch multiple changes\n        }\n      });\n\n      this.watchers.push(watcher);\n    }\n  }\n\n  async restart(): Promise<void> {\n    if (this.isRestarting || !this.isDirty) return;\n    \n    this.isRestarting = true;\n    this.isDirty = false;\n    console.error(\"[Wrapper] Restarting server...\");\n    \n    // Kill the current process\n    if (this.serverProcess) {\n      this.serverProcess.kill(\"SIGTERM\");\n      \n      // Wait for process to exit\n      await new Promise<void>((resolve) => {\n        this.serverProcess!.on(\"exit\", resolve);\n        // Force kill after timeout\n        setTimeout(() => {\n          if (this.serverProcess && this.serverProcess.exitCode === null) {\n            this.serverProcess.kill(\"SIGKILL\");\n          }\n        }, 5000);\n      });\n    }\n    \n    // Start new process\n    this.isRestarting = false;\n    this.start();\n  }\n\n  async stop(): Promise<void> {\n    // Close all watchers\n    for (const watcher of this.watchers) {\n      await watcher.close();\n    }\n    \n    // Kill server process\n    if (this.serverProcess) {\n      this.serverProcess.kill(\"SIGTERM\");\n    }\n  }\n}\n\n// Global wrapper instance for signal handlers\nlet wrapper: ServerWrapper | null = null;\n\n// Handle signals\nprocess.on(\"SIGINT\", async () => {\n  console.error(\"[Wrapper] Received SIGINT, shutting down...\");\n  if (wrapper) {\n    await wrapper.stop();\n  }\n  process.exit(0);\n});\n\nprocess.on(\"SIGTERM\", async () => {\n  console.error(\"[Wrapper] Received SIGTERM, shutting down...\");\n  if (wrapper) {\n    await wrapper.stop();\n  }\n  process.exit(0);\n});\n\n// Parse command line arguments\nconst args = process.argv.slice(2);\nconst parsedArgs = parseArgs(args);\nconst { command, args: commandArgs } = buildCommand(parsedArgs);\n\n// Start the wrapper\nwrapper = new ServerWrapper({\n  includePatterns: parsedArgs.includePatterns,\n  command,\n  commandArgs\n});\n\nwrapper.start();\nwrapper.startWatching();"],"mappings":"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"}