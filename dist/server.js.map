{"version":3,"file":"server.js","names":[],"sources":["../src/server.ts"],"sourcesContent":["#!/usr/bin/env node\nimport { Server } from \"@modelcontextprotocol/sdk/server/index.js\";\nimport { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\nimport { ListToolsRequestSchema, CallToolRequestSchema } from \"@modelcontextprotocol/sdk/types.js\";\nimport chokidar, { FSWatcher } from \"chokidar\";\nimport { readdir } from \"fs/promises\";\nimport { join, dirname } from \"path\";\nimport { fileURLToPath } from \"url\";\nimport type { Tool } from './types.js';\n\nconst __dirname = dirname(fileURLToPath(import.meta.url));\n\nclass HotReloadMCPServer {\n  private server: Server;\n  private tools: Map<string, Tool>;\n  private toolsDir: string;\n  private watcher: FSWatcher | null;\n  private isDirty: boolean;\n  private includePatterns: string[];\n\n  constructor() {\n    this.server = new Server({\n      name: \"hot-reload-mcp\",\n      version: \"1.0.0\",\n    }, {\n      capabilities: {\n        tools: {}\n      }\n    });\n\n    this.tools = new Map();\n    this.toolsDir = join(__dirname, \"..\", \"tools\");\n    this.watcher = null;\n    this.isDirty = false;\n    this.includePatterns = [];\n    \n    // Load include patterns from environment or default\n    const includeEnv = process.env.MCP_HOT_RELOAD_INCLUDE;\n    if (includeEnv) {\n      this.includePatterns = includeEnv.split(',').map(p => p.trim());\n      console.error(`Include patterns: ${this.includePatterns.join(', ')}`);\n    }\n  }\n\n  async loadTools(): Promise<void> {\n    try {\n      const files = await readdir(this.toolsDir);\n      const newTools = new Map<string, Tool>();\n\n      for (const file of files) {\n        if (file.endsWith(\".js\") || file.endsWith(\".mjs\")) {\n          const toolPath = join(this.toolsDir, file);\n          try {\n            const toolUrl = `file://${toolPath}?t=${Date.now()}`;\n            const module = await import(toolUrl);\n            if (module.default && module.default.name) {\n              newTools.set(module.default.name, module.default);\n              console.error(`Loaded tool: ${module.default.name}`);\n            }\n          } catch (error) {\n            console.error(`Failed to load tool ${file}:`, error);\n          }\n        }\n      }\n\n      const oldToolNames = Array.from(this.tools.keys());\n      const newToolNames = Array.from(newTools.keys());\n      \n      this.tools = newTools;\n\n      const added = newToolNames.filter(name => !oldToolNames.includes(name));\n      const removed = oldToolNames.filter(name => !newToolNames.includes(name));\n      const changed = newToolNames.filter(name => oldToolNames.includes(name));\n\n      if (added.length > 0 || removed.length > 0 || changed.length > 0) {\n        // Only send notification if server is connected\n        if ((this.server as any).transport) {\n          await this.server.notification({\n            method: \"tools/list_changed\"\n          });\n        }\n        console.error(`Tools updated - Added: ${added.length}, Removed: ${removed.length}, Changed: ${changed.length}`);\n      }\n    } catch (error) {\n      console.error(\"Error loading tools:\", error);\n    }\n  }\n\n  setupHandlers(): void {\n    this.server.setRequestHandler(ListToolsRequestSchema, async () => {\n      // Check if dirty and need restart\n      if (this.isDirty) {\n        console.error(\"Server is dirty, restart required for include pattern changes\");\n        await this.server.notification({\n          method: \"server/dirty\",\n          params: {\n            message: \"Server restart required due to include pattern file changes\"\n          }\n        });\n      }\n\n      const tools = Array.from(this.tools.values()).map(tool => ({\n        name: tool.name,\n        description: tool.description || \"No description\",\n        inputSchema: tool.inputSchema || {\n          type: \"object\",\n          properties: {},\n          required: []\n        }\n      }));\n\n      return { tools };\n    });\n\n    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {\n      const tool = this.tools.get(request.params.name);\n      if (!tool) {\n        throw new Error(`Tool not found: ${request.params.name}`);\n      }\n\n      try {\n        const result = await tool.handler(request.params.arguments || {});\n        return {\n          content: [{\n            type: \"text\",\n            text: typeof result === \"string\" ? result : JSON.stringify(result, null, 2)\n          }]\n        };\n      } catch (error) {\n        return {\n          content: [{\n            type: \"text\",\n            text: `Error: ${error instanceof Error ? error.message : String(error)}`\n          }],\n          isError: true\n        };\n      }\n    });\n  }\n\n  async startWatching(): Promise<void> {\n    // Watch tools directory\n    this.watcher = chokidar.watch(this.toolsDir, {\n      persistent: true,\n      ignoreInitial: true\n    });\n\n    this.watcher.on(\"add\", async () => {\n      console.error(\"Tool added, reloading...\");\n      await this.loadTools();\n    });\n\n    this.watcher.on(\"change\", async () => {\n      console.error(\"Tool changed, reloading...\");\n      await this.loadTools();\n    });\n\n    this.watcher.on(\"unlink\", async () => {\n      console.error(\"Tool removed, reloading...\");\n      await this.loadTools();\n    });\n\n    // Watch include patterns if specified\n    if (this.includePatterns.length > 0) {\n      const includeWatcher = chokidar.watch(this.includePatterns, {\n        persistent: true,\n        ignoreInitial: true,\n        cwd: process.cwd()\n      });\n\n      includeWatcher.on(\"all\", (event, path) => {\n        console.error(`Include file ${event}: ${path}, marking server as dirty`);\n        this.isDirty = true;\n        \n        // Send notification that restart is required\n        if ((this.server as any).transport) {\n          this.server.notification({\n            method: \"server/dirty\",\n            params: {\n              event,\n              path,\n              message: \"Server restart required\"\n            }\n          }).catch(err => console.error(\"Failed to send dirty notification:\", err));\n        }\n      });\n\n      console.error(`Watching include patterns: ${this.includePatterns.join(', ')}`);\n    }\n  }\n\n  async start(): Promise<void> {\n    await this.loadTools();\n    this.setupHandlers();\n    await this.startWatching();\n\n    const transport = new StdioServerTransport();\n    await this.server.connect(transport);\n    console.error(\"Hot-reload MCP server started\");\n    \n    if (this.includePatterns.length > 0) {\n      console.error(`Include patterns active: ${this.includePatterns.join(', ')}`);\n    }\n  }\n}\n\n// Handle graceful shutdown\nprocess.on('SIGINT', () => {\n  console.error('Shutting down gracefully...');\n  process.exit(0);\n});\n\nprocess.on('SIGTERM', () => {\n  console.error('Shutting down gracefully...');\n  process.exit(0);\n});\n\nconst server = new HotReloadMCPServer();\nserver.start().catch(console.error);"],"mappings":"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"}